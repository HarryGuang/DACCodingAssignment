{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../_forms/text-input/text-input.component\";\nfunction RegisterComponent_div_19_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const error_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(error_r2);\n  }\n}\nfunction RegisterComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"ul\", 14);\n    i0.ɵɵtemplate(2, RegisterComponent_div_19_li_2_Template, 2, 1, \"li\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.validationErrors);\n  }\n}\nexport class RegisterComponent {\n  constructor(accountService, toastr, fb, router) {\n    this.accountService = accountService;\n    this.toastr = toastr;\n    this.fb = fb;\n    this.router = router;\n    this.cancelRegister = new EventEmitter();\n    this.registerForm = new FormGroup({});\n    this.maxDate = new Date();\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);\n  }\n  initializeForm() {\n    this.registerForm = this.fb.group({\n      gender: ['male'],\n      username: ['', Validators.required],\n      knownAs: ['', Validators.required],\n      dateOfBirth: ['', [Validators.required, this.compareMinAge(this.maxDate)]],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]],\n      confirmPassword: ['', [Validators.required, this.matchValues('password')]]\n    });\n    this.registerForm.controls['password'].valueChanges.subscribe({\n      next: () => this.registerForm.controls['confirmPassword'].updateValueAndValidity()\n    });\n  }\n  matchValues(matchTo) {\n    return control => {\n      return control.value === control.parent?.get(matchTo)?.value ? null : {\n        notMatching: true\n      };\n    };\n  }\n  compareMinAge(compareTo) {\n    return control => {\n      return control.value <= compareTo ? null : {\n        notMinAge: true\n      };\n    };\n  }\n  register() {\n    const dob = this.getDateOnly(this.registerForm.controls['dateOfBirth'].value);\n    const values = {\n      ...this.registerForm.value,\n      dateOfBirth: dob\n    };\n    //console.log(values);\n    this.accountService.register(values).subscribe({\n      next: response => {\n        this.router.navigateByUrl('/members');\n      },\n      error: error => {\n        this.validationErrors = error;\n      }\n    });\n  }\n  cancel() {\n    //console.log('cancelled');\n    this.cancelRegister.emit(false);\n  }\n  getDateOnly(dob) {\n    if (!dob) return;\n    let theDob = new Date(dob);\n    return new Date(theDob.setMinutes(theDob.getMinutes() - theDob.getTimezoneOffset())).toISOString().slice(0, 10);\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.ToastrService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.Router));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  outputs: {\n    cancelRegister: \"cancelRegister\"\n  },\n  decls: 25,\n  vars: 17,\n  consts: [[\"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"text-center\", \"text-primary\"], [1, \"mb-3\"], [2, \"margin-right\", \"10px\"], [1, \"form-check-label\"], [\"type\", \"radio\", \"value\", \"male\", \"formControlName\", \"gender\", 1, \"form-check-input\"], [\"type\", \"radio\", \"value\", \"female\", \"formControlName\", \"gender\", 1, \"form-check-input\"], [3, \"formControl\", \"label\"], [3, \"formControl\", \"label\", \"type\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"me-2\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", 3, \"click\"], [1, \"row\"], [1, \"text-danger\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.registerForm.valid && ctx.register();\n      });\n      i0.ɵɵelementStart(1, \"h2\", 1);\n      i0.ɵɵtext(2, \"Sign up\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"hr\");\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"I am a: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"label\", 4);\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵtext(9, \" Male \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\", 4);\n      i0.ɵɵelement(11, \"input\", 6);\n      i0.ɵɵtext(12, \" Female \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(13, \"app-text-input\", 7)(14, \"app-text-input\", 7)(15, \"app-text-input\", 7)(16, \"app-text-input\", 7)(17, \"app-text-input\", 8)(18, \"app-text-input\", 8);\n      i0.ɵɵtemplate(19, RegisterComponent_div_19_Template, 3, 1, \"div\", 9);\n      i0.ɵɵelementStart(20, \"div\", 10)(21, \"button\", 11);\n      i0.ɵɵtext(22, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_23_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(24, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"formControl\", ctx.registerForm.controls[\"username\"])(\"label\", \"Username\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.registerForm.controls[\"displayName\"])(\"label\", \"Display Name\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.registerForm.controls[\"firstText\"])(\"label\", \"First Name\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.registerForm.controls[\"country\"])(\"label\", \"Country\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.registerForm.controls[\"password\"])(\"label\", \"Password\")(\"type\", \"password\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.registerForm.controls[\"confirmPassword\"])(\"label\", \"Confirm Password\")(\"type\", \"password\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.validationErrors);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormControlDirective, i3.FormGroupDirective, i3.FormControlName, i6.TextInputComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormGroup","Validators","i0","RegisterComponent","constructor","accountService","toastr","fb","router","Date","ngOnInit","initializeForm","maxDate","setFullYear","getFullYear","registerForm","group","gender","username","required","knownAs","dateOfBirth","compareMinAge","city","country","password","minLength","maxLength","confirmPassword","matchValues","controls","valueChanges","subscribe","next","updateValueAndValidity","matchTo","control","value","parent","get","notMatching","compareTo","notMinAge","register","dob","getDateOnly","values","response","navigateByUrl","error","validationErrors","cancel","cancelRegister","emit","theDob","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","selectors","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Harry\\NetCore\\DACCodingAssignment\\DACCodingAssignment\\clientfront\\src\\app\\register\\register.component.ts","D:\\Harry\\NetCore\\DACCodingAssignment\\DACCodingAssignment\\clientfront\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from '../_services/account.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  @Output() cancelRegister = new EventEmitter();\n  registerForm: FormGroup = new FormGroup({});\n  maxDate: Date = new Date();\n  validationErrors: string[] | undefined;\n\n  constructor(\n    private accountService: AccountService,\n    private toastr: ToastrService,\n    private fb: FormBuilder,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.initializeForm();\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);\n  }\n\n  initializeForm() {\n    this.registerForm = this.fb.group({\n      gender: ['male'],\n      username: ['', Validators.required],\n      knownAs: ['', Validators.required],\n      dateOfBirth: [\n        '',\n        [Validators.required, this.compareMinAge(this.maxDate)],\n      ],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      password: [\n        '',\n        [Validators.required, Validators.minLength(4), Validators.maxLength(8)],\n      ],\n      confirmPassword: [\n        '',\n        [Validators.required, this.matchValues('password')],\n      ],\n    });\n    this.registerForm.controls['password'].valueChanges.subscribe({\n      next: () =>\n        this.registerForm.controls['confirmPassword'].updateValueAndValidity(),\n    });\n  }\n\n  matchValues(matchTo: string): ValidatorFn {\n    return (control: AbstractControl) => {\n      return control.value === control.parent?.get(matchTo)?.value\n        ? null\n        : { notMatching: true };\n    };\n  }\n\n  compareMinAge(compareTo: Date): ValidatorFn {\n    return (control: AbstractControl) => {\n      return control.value <= compareTo ? null : { notMinAge: true };\n    };\n  }\n\n  register() {\n    const dob = this.getDateOnly(\n      this.registerForm.controls['dateOfBirth'].value\n    );\n    const values = { ...this.registerForm.value, dateOfBirth: dob };\n    //console.log(values);\n    this.accountService.register(values).subscribe({\n      next: (response) => {\n        this.router.navigateByUrl('/members');\n      },\n      error: (error) => {\n        this.validationErrors = error;\n      },\n    });\n  }\n\n  cancel() {\n    //console.log('cancelled');\n    this.cancelRegister.emit(false);\n  }\n\n  private getDateOnly(dob: string | undefined) {\n    if (!dob) return;\n    let theDob = new Date(dob);\n    return new Date(\n      theDob.setMinutes(theDob.getMinutes() - theDob.getTimezoneOffset())\n    )\n      .toISOString()\n      .slice(0, 10);\n  }\n}\n","<form [formGroup]=\"registerForm\" (ngSubmit)=\"registerForm.valid && register()\" autocomplete=\"off\">\n    <h2 class=\"text-center text-primary\">Sign up</h2>\n    <hr/>\n    <div class=\"mb-3\">\n        <label style=\"margin-right: 10px;\">I am a: </label>\n        <label class=\"form-check-label\">\n            <input type=\"radio\" class=\"form-check-input\" value=\"male\" formControlName=\"gender\"> Male\n        </label>\n        <label class=\"form-check-label\">\n            <input type=\"radio\" class=\"form-check-input\" value=\"female\" formControlName=\"gender\"> Female\n        </label>\n    </div>\n    <app-text-input \n        [formControl]=\"$any(registerForm.controls['username'])\"\n        [label]=\"'Username'\"\n    ></app-text-input>\n    <app-text-input \n        [formControl]=\"$any(registerForm.controls['displayName'])\"\n        [label]=\"'Display Name'\"\n    ></app-text-input>\n    <app-text-input \n        [formControl]=\"$any(registerForm.controls['firstText'])\"\n        [label]=\"'First Name'\"\n    ></app-text-input>\n    <app-text-input \n        [formControl]=\"$any(registerForm.controls['country'])\"\n        [label]=\"'Country'\"\n    ></app-text-input>\n    <app-text-input \n        [formControl]=\"$any(registerForm.controls['password'])\"\n        [label]=\"'Password'\"\n        [type]=\"'password'\"\n    ></app-text-input>\n    <app-text-input \n        [formControl]=\"$any(registerForm.controls['confirmPassword'])\"\n        [label]=\"'Confirm Password'\"\n        [type]=\"'password'\"\n    ></app-text-input>\n\n    <div class=\"row\" *ngIf=\"validationErrors\">\n        <ul class=\"text-danger\">\n            <li *ngFor=\"let error of validationErrors\">{{error}}</li>\n        </ul>\n    </div>\n\n    <div class=\"text-center\">\n        <button [disabled]=\"!registerForm.valid\" class=\"btn btn-success me-2\" type=\"submit\">Register</button>\n        <button class=\"btn btn-default\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n    </div>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}