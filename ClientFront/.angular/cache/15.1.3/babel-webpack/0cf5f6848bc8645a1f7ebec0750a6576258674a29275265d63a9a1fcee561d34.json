{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nlet UsereditModalComponent = class UsereditModalComponent {\n  constructor(membersService, bsModalRef, fb, router) {\n    this.membersService = membersService;\n    this.bsModalRef = bsModalRef;\n    this.fb = fb;\n    this.router = router;\n    this.username = '';\n    this.displayName = '';\n    this.firstName = '';\n    this.lastName = '';\n    this.gender = '';\n    this.closeBtnName = '';\n    this.userEditForm = new FormGroup({});\n    this.genderList = [{\n      value: 'male',\n      display: 'Males'\n    }, {\n      value: 'female',\n      display: 'Females'\n    }];\n  }\n  ngOnInit() {\n    this.initializeForm();\n  }\n  initializeForm() {\n    this.userEditForm = this.fb.group({\n      gender: [this.gender],\n      username: [this.username, Validators.required],\n      displayName: [this.displayName, Validators.required],\n      firstName: [this.firstName, Validators.required],\n      lastName: [this.lastName, Validators.required]\n    });\n  }\n  matchValues(matchTo) {\n    return control => {\n      return control.value === control.parent?.get(matchTo)?.value ? null : {\n        notMatching: true\n      };\n    };\n  }\n  updateMember() {\n    const values = this.userEditForm.value;\n    //console.log(values);\n    this.membersService.updateMember(values).subscribe({\n      next: response => {\n        this.membersService.memberCache = new Map();\n        this.bsModalRef.hide();\n        this.router.navigateByUrl('/members');\n        //console.log(response);\n      },\n\n      error: error => {\n        this.validationErrors = error;\n        console.log(error);\n      }\n    });\n  }\n};\nUsereditModalComponent = __decorate([Component({\n  selector: 'app-useredit-modal',\n  templateUrl: './useredit-modal.component.html',\n  styleUrls: ['./useredit-modal.component.css']\n})], UsereditModalComponent);\nexport { UsereditModalComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAIEC,SAAS,EAETC,UAAU,QACL,gBAAgB;AAOhB,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAejCC,YACUC,cAA8B,EAC/BC,UAAsB,EACrBC,EAAe,EACfC,MAAc;IAHd,mBAAc,GAAdH,cAAc;IACf,eAAU,GAAVC,UAAU;IACT,OAAE,GAAFC,EAAE;IACF,WAAM,GAANC,MAAM;IAlBhB,aAAQ,GAAG,EAAE;IACb,gBAAW,GAAG,EAAE;IAChB,cAAS,GAAG,EAAE;IACd,aAAQ,GAAG,EAAE;IACb,WAAM,GAAG,EAAE;IACX,iBAAY,GAAG,EAAE;IAEjB,iBAAY,GAAc,IAAIP,SAAS,CAAC,EAAE,CAAC;IAE3C,eAAU,GAAG,CACX;MAAEQ,KAAK,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAO,CAAE,EACnC;MAAED,KAAK,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAS,CAAE,CACxC;EAOE;EAEHC,QAAQ;IACN,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAA,cAAc;IACZ,IAAI,CAACC,YAAY,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAChCC,MAAM,EAAE,CAAC,IAAI,CAACA,MAAM,CAAC;MACrBC,QAAQ,EAAE,CAAC,IAAI,CAACA,QAAQ,EAAEd,UAAU,CAACe,QAAQ,CAAC;MAC9CC,WAAW,EAAE,CAAC,IAAI,CAACA,WAAW,EAAEhB,UAAU,CAACe,QAAQ,CAAC;MACpDE,SAAS,EAAE,CAAC,IAAI,CAACA,SAAS,EAAEjB,UAAU,CAACe,QAAQ,CAAC;MAChDG,QAAQ,EAAE,CAAC,IAAI,CAACA,QAAQ,EAAElB,UAAU,CAACe,QAAQ;KAC9C,CAAC;EACJ;EAEAI,WAAW,CAACC,OAAe;IACzB,OAAQC,OAAwB,IAAI;MAClC,OAAOA,OAAO,CAACd,KAAK,KAAKc,OAAO,CAACC,MAAM,EAAEC,GAAG,CAACH,OAAO,CAAC,EAAEb,KAAK,GACxD,IAAI,GACJ;QAAEiB,WAAW,EAAE;MAAI,CAAE;IAC3B,CAAC;EACH;EAEAC,YAAY;IACV,MAAMC,MAAM,GAAG,IAAI,CAACf,YAAY,CAACJ,KAAK;IACtC;IAEA,IAAI,CAACJ,cAAc,CAACsB,YAAY,CAACC,MAAM,CAAC,CAACC,SAAS,CAAC;MACjDC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAAC1B,cAAc,CAAC2B,WAAW,GAAG,IAAIC,GAAG,EAAE;QAC3C,IAAI,CAAC3B,UAAU,CAAC4B,IAAI,EAAE;QAEtB,IAAI,CAAC1B,MAAM,CAAC2B,aAAa,CAAC,UAAU,CAAC;QACrC;MACF,CAAC;;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACC,gBAAgB,GAAGD,KAAK;QAC7BE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MACpB;KACD,CAAC;EACJ;CACD;AA9DYjC,sBAAsB,eALlCH,SAAS,CAAC;EACTwC,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACWvC,sBAAsB,CA8DlC;SA9DYA,sBAAsB","names":["Component","FormGroup","Validators","UsereditModalComponent","constructor","membersService","bsModalRef","fb","router","value","display","ngOnInit","initializeForm","userEditForm","group","gender","username","required","displayName","firstName","lastName","matchValues","matchTo","control","parent","get","notMatching","updateMember","values","subscribe","next","response","memberCache","Map","hide","navigateByUrl","error","validationErrors","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Harry\\NetCore\\DACCodingAssignment\\DACCodingAssignment\\clientfront\\src\\app\\modals\\useredit-modal\\useredit-modal.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MembersService } from 'src/app/_services/members.service';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-useredit-modal',\n  templateUrl: './useredit-modal.component.html',\n  styleUrls: ['./useredit-modal.component.css'],\n})\nexport class UsereditModalComponent implements OnInit {\n  username = '';\n  displayName = '';\n  firstName = '';\n  lastName = '';\n  gender = '';\n  closeBtnName = '';\n\n  userEditForm: FormGroup = new FormGroup({});\n\n  genderList = [\n    { value: 'male', display: 'Males' },\n    { value: 'female', display: 'Females' },\n  ];\n\n  constructor(\n    private membersService: MembersService,\n    public bsModalRef: BsModalRef,\n    private fb: FormBuilder,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.initializeForm();\n  }\n\n  initializeForm() {\n    this.userEditForm = this.fb.group({\n      gender: [this.gender],\n      username: [this.username, Validators.required],\n      displayName: [this.displayName, Validators.required],\n      firstName: [this.firstName, Validators.required],\n      lastName: [this.lastName, Validators.required],\n    });\n  }\n\n  matchValues(matchTo: string): ValidatorFn {\n    return (control: AbstractControl) => {\n      return control.value === control.parent?.get(matchTo)?.value\n        ? null\n        : { notMatching: true };\n    };\n  }\n\n  updateMember() {\n    const values = this.userEditForm.value;\n    //console.log(values);\n\n    this.membersService.updateMember(values).subscribe({\n      next: (response) => {\n        this.membersService.memberCache = new Map();\n        this.bsModalRef.hide();\n\n        this.router.navigateByUrl('/members');\n        //console.log(response);\n      },\n      error: (error) => {\n        this.validationErrors = error;\n        console.log(error);\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}