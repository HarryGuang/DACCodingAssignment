{"ast":null,"code":"import { delay, finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/busy.service\";\nexport class LoadingInterceptor {\n  constructor(busyService) {\n    this.busyService = busyService;\n  }\n  intercept(request, next) {\n    this.busyService.busy();\n    return next.handle(request).pipe(delay(1000), finalize(() => {\n      this.busyService.idle();\n    }));\n  }\n}\nLoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n  return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.BusyService));\n};\nLoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadingInterceptor,\n  factory: LoadingInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAASA,KAAK,EAAEC,QAAQ,QAAoB,MAAM;;;AAIlD,OAAM,MAAOC,kBAAkB;EAC7BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,IAAI,CAACH,WAAW,CAACI,IAAI,EAAE;IACvB,OAAOD,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAC9BV,KAAK,CAAC,IAAI,CAAC,EACXC,QAAQ,CAAC,MAAK;MACZ,IAAI,CAACG,WAAW,CAACO,IAAI,EAAE;IACzB,CAAC,CAAC,CACH;EACH;;AAdWT,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAU,SAAlBV,kBAAkB;AAAA","names":["delay","finalize","LoadingInterceptor","constructor","busyService","intercept","request","next","busy","handle","pipe","idle","factory"],"sourceRoot":"","sources":["D:\\Harry\\NetCore\\DACCodingAssignment\\DACCodingAssignment\\clientfront\\src\\app\\_interceptors\\loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { delay, finalize, Observable } from 'rxjs';\nimport { BusyService } from '../_services/busy.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n  constructor(private busyService: BusyService) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    this.busyService.busy();\n    return next.handle(request).pipe(\n      delay(1000),\n      finalize(() => {\n        this.busyService.idle();\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}