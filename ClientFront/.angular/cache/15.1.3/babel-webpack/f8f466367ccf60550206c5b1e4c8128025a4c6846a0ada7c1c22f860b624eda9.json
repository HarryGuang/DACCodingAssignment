{"ast":null,"code":"import { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport class ErrorInterceptor {\n  constructor(rooter, toastr) {\n    this.rooter = rooter;\n    this.toastr = toastr;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error) {\n        con;\n        switch (error.status) {\n          case 400:\n            if (error.error.errors) {\n              const modelStateErrors = [];\n              for (const key in error.error.errors) {\n                if (error.error.errors[key]) {\n                  modelStateErrors.push(error.error.errors[key]);\n                }\n              }\n              throw modelStateErrors.flat();\n            } else {\n              this.toastr.error(error.error, error.status.toString());\n            }\n            break;\n          case 401:\n            this.toastr.error('Unauthorised', error.status.toString());\n            break;\n          case 404:\n            this.rooter.navigateByUrl('/not-found');\n            break;\n          case 500:\n            const navigationExtras = {\n              state: {\n                error: error.error\n              }\n            };\n            this.rooter.navigateByUrl('/server-error', navigationExtras);\n            break;\n          default:\n            this.toastr.error('Something unexpected went wrong');\n            console.log(error);\n            break;\n        }\n      }\n      throw error;\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAASA,UAAU,QAAoB,MAAM;;;;AAK7C,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,MAAc,EAAUC,MAAqB;IAA7C,WAAM,GAAND,MAAM;IAAkB,WAAM,GAANC,MAAM;EAAkB;EAEpEC,SAAS,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BT,UAAU,CAAEU,KAAwB,IAAI;MACtC,IAAIA,KAAK,EAAE;QACTC,GAAG;QACH,QAAQD,KAAK,CAACE,MAAM;UAClB,KAAK,GAAG;YACN,IAAIF,KAAK,CAACA,KAAK,CAACG,MAAM,EAAE;cACtB,MAAMC,gBAAgB,GAAG,EAAE;cAC3B,KAAK,MAAMC,GAAG,IAAIL,KAAK,CAACA,KAAK,CAACG,MAAM,EAAE;gBACpC,IAAIH,KAAK,CAACA,KAAK,CAACG,MAAM,CAACE,GAAG,CAAC,EAAE;kBAC3BD,gBAAgB,CAACE,IAAI,CAACN,KAAK,CAACA,KAAK,CAACG,MAAM,CAACE,GAAG,CAAC,CAAC;;;cAGlD,MAAMD,gBAAgB,CAACG,IAAI,EAAE;aAC9B,MAAM;cACL,IAAI,CAACb,MAAM,CAACM,KAAK,CAACA,KAAK,CAACA,KAAK,EAAEA,KAAK,CAACE,MAAM,CAACM,QAAQ,EAAE,CAAC;;YAEzD;UACF,KAAK,GAAG;YACN,IAAI,CAACd,MAAM,CAACM,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACE,MAAM,CAACM,QAAQ,EAAE,CAAC;YAC1D;UACF,KAAK,GAAG;YACN,IAAI,CAACf,MAAM,CAACgB,aAAa,CAAC,YAAY,CAAC;YACvC;UACF,KAAK,GAAG;YACN,MAAMC,gBAAgB,GAAqB;cACzCC,KAAK,EAAE;gBAAEX,KAAK,EAAEA,KAAK,CAACA;cAAK;aAC5B;YACD,IAAI,CAACP,MAAM,CAACgB,aAAa,CAAC,eAAe,EAAEC,gBAAgB,CAAC;YAC5D;UACF;YACE,IAAI,CAAChB,MAAM,CAACM,KAAK,CAAC,iCAAiC,CAAC;YACpDY,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;YAClB;QAAM;;MAGZ,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;;AA9CWT,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAuB,SAAhBvB,gBAAgB;AAAA","names":["catchError","ErrorInterceptor","constructor","rooter","toastr","intercept","request","next","handle","pipe","error","con","status","errors","modelStateErrors","key","push","flat","toString","navigateByUrl","navigationExtras","state","console","log","factory"],"sourceRoot":"","sources":["D:\\Harry\\NetCore\\DACCodingAssignment\\DACCodingAssignment\\clientfront\\src\\app\\_interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { catchError, Observable } from 'rxjs';\nimport { NavigationExtras, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private rooter: Router, private toastr: ToastrService) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error) {\n          con\n          switch (error.status) {\n            case 400:\n              if (error.error.errors) {\n                const modelStateErrors = [];\n                for (const key in error.error.errors) {\n                  if (error.error.errors[key]) {\n                    modelStateErrors.push(error.error.errors[key]);\n                  }\n                }\n                throw modelStateErrors.flat();\n              } else {\n                this.toastr.error(error.error, error.status.toString());\n              }\n              break;\n            case 401:\n              this.toastr.error('Unauthorised', error.status.toString());\n              break;\n            case 404:\n              this.rooter.navigateByUrl('/not-found');\n              break;\n            case 500:\n              const navigationExtras: NavigationExtras = {\n                state: { error: error.error },\n              };\n              this.rooter.navigateByUrl('/server-error', navigationExtras);\n              break;\n            default:\n              this.toastr.error('Something unexpected went wrong');\n              console.log(error);\n              break;\n          }\n        }\n        throw error;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}