{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(accountService, toastr, fb, router) {\n    this.accountService = accountService;\n    this.toastr = toastr;\n    this.fb = fb;\n    this.router = router;\n    this.cancelRegister = new EventEmitter();\n    this.registerForm = new FormGroup({});\n    this.maxDate = new Date();\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);\n  }\n  initializeForm() {\n    this.registerForm = this.fb.group({\n      gender: ['male'],\n      username: ['', Validators.required],\n      knownAs: ['', Validators.required],\n      dateOfBirth: ['', [Validators.required, this.compareMinAge(this.maxDate)]],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]],\n      confirmPassword: ['', [Validators.required, this.matchValues('password')]]\n    });\n    this.registerForm.controls['password'].valueChanges.subscribe({\n      next: () => this.registerForm.controls['confirmPassword'].updateValueAndValidity()\n    });\n  }\n  matchValues(matchTo) {\n    return control => {\n      return control.value === control.parent?.get(matchTo)?.value ? null : {\n        notMatching: true\n      };\n    };\n  }\n  compareMinAge(compareTo) {\n    return control => {\n      return control.value <= compareTo ? null : {\n        notMinAge: true\n      };\n    };\n  }\n  register() {\n    const dob = this.getDateOnly(this.registerForm.controls['dateOfBirth'].value);\n    const values = {\n      ...this.registerForm.value,\n      dateOfBirth: dob\n    };\n    //console.log(values);\n    this.accountService.register(values).subscribe({\n      next: response => {\n        this.router.navigateByUrl('/members');\n      },\n      error: error => {\n        this.validationErrors = error;\n      }\n    });\n  }\n  cancel() {\n    //console.log('cancelled');\n    this.cancelRegister.emit(false);\n  }\n  getDateOnly(dob) {\n    if (!dob) return;\n    let theDob = new Date(dob);\n    return new Date(theDob.setMinutes(theDob.getMinutes() - theDob.getTimezoneOffset())).toISOString().slice(0, 10);\n  }\n};\n__decorate([Output()], RegisterComponent.prototype, \"cancelRegister\", void 0);\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","Output","EventEmitter","FormGroup","Validators","RegisterComponent","constructor","accountService","toastr","fb","router","Date","ngOnInit","initializeForm","maxDate","setFullYear","getFullYear","registerForm","group","gender","username","required","knownAs","dateOfBirth","compareMinAge","city","country","password","minLength","maxLength","confirmPassword","matchValues","controls","valueChanges","subscribe","next","updateValueAndValidity","matchTo","control","value","parent","get","notMatching","compareTo","notMinAge","register","dob","getDateOnly","values","response","navigateByUrl","error","validationErrors","cancel","cancelRegister","emit","theDob","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Harry\\NetCore\\DACCodingAssignment\\DACCodingAssignment\\clientfront\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from '../_services/account.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  @Output() cancelRegister = new EventEmitter();\n  registerForm: FormGroup = new FormGroup({});\n  maxDate: Date = new Date();\n  validationErrors: string[] | undefined;\n\n  constructor(\n    private accountService: AccountService,\n    private toastr: ToastrService,\n    private fb: FormBuilder,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.initializeForm();\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);\n  }\n\n  initializeForm() {\n    this.registerForm = this.fb.group({\n      gender: ['male'],\n      username: ['', Validators.required],\n      knownAs: ['', Validators.required],\n      dateOfBirth: [\n        '',\n        [Validators.required, this.compareMinAge(this.maxDate)],\n      ],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      password: [\n        '',\n        [Validators.required, Validators.minLength(4), Validators.maxLength(8)],\n      ],\n      confirmPassword: [\n        '',\n        [Validators.required, this.matchValues('password')],\n      ],\n    });\n    this.registerForm.controls['password'].valueChanges.subscribe({\n      next: () =>\n        this.registerForm.controls['confirmPassword'].updateValueAndValidity(),\n    });\n  }\n\n  matchValues(matchTo: string): ValidatorFn {\n    return (control: AbstractControl) => {\n      return control.value === control.parent?.get(matchTo)?.value\n        ? null\n        : { notMatching: true };\n    };\n  }\n\n  compareMinAge(compareTo: Date): ValidatorFn {\n    return (control: AbstractControl) => {\n      return control.value <= compareTo ? null : { notMinAge: true };\n    };\n  }\n\n  register() {\n    const dob = this.getDateOnly(\n      this.registerForm.controls['dateOfBirth'].value\n    );\n    const values = { ...this.registerForm.value, dateOfBirth: dob };\n    //console.log(values);\n    this.accountService.register(values).subscribe({\n      next: (response) => {\n        this.router.navigateByUrl('/members');\n      },\n      error: (error) => {\n        this.validationErrors = error;\n      },\n    });\n  }\n\n  cancel() {\n    //console.log('cancelled');\n    this.cancelRegister.emit(false);\n  }\n\n  private getDateOnly(dob: string | undefined) {\n    if (!dob) return;\n    let theDob = new Date(dob);\n    return new Date(\n      theDob.setMinutes(theDob.getMinutes() - theDob.getTimezoneOffset())\n    )\n      .toISOString()\n      .slice(0, 10);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}