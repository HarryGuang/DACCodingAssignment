{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.currentUserSource = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSource.asObservable();\n  }\n  login(model) {\n    return this.http.post(this.baseUrl + 'account/login', model).pipe(map(response => {\n      const user = response;\n      if (user) {\n        this.setCurrentUser(user);\n      }\n    }));\n  }\n  register(model) {\n    return this.http.post(this.baseUrl + 'account/register', model).pipe(map(user => {\n      if (user) {\n        this.setCurrentUser(user);\n      }\n    }));\n  }\n  register(model) {\n    return this.http.post(this.baseUrl + 'account/register', model).pipe(map(user => {\n      if (user) {\n        this.setCurrentUser(user);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('user');\n    this.currentUserSource.next(null);\n  }\n  setCurrentUser(user) {\n    user.roles = [];\n    const roles = this.getDecodedToken(user.token).role;\n    Array.isArray(roles) ? user.roles = roles : user.roles.push(roles);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.currentUserSource.next(user);\n  }\n  getDecodedToken(token) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,GAAG,QAAQ,MAAM;AAE3C,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJxB,YAAO,GAAGH,WAAW,CAACI,MAAM;IACpB,sBAAiB,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAClE,iBAAY,GAAG,IAAI,CAACO,iBAAiB,CAACC,YAAY,EAAE;EAEb;EAEvCC,KAAK,CAACC,KAAU;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAO,IAAI,CAACC,OAAO,GAAG,eAAe,EAAEF,KAAK,CAAC,CAACG,IAAI,CACrEZ,GAAG,CAAEa,QAAc,IAAI;MACrB,MAAMC,IAAI,GAAGD,QAAQ;MACrB,IAAIC,IAAI,EAAE;QACR,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC;;IAE7B,CAAC,CAAC,CACH;EACH;EAEAE,QAAQ,CAACP,KAAU;IACjB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAO,IAAI,CAACC,OAAO,GAAG,kBAAkB,EAAEF,KAAK,CAAC,CAACG,IAAI,CACxEZ,GAAG,CAAEc,IAAI,IAAI;MACX,IAAIA,IAAI,EAAE;QACR,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC;;IAE7B,CAAC,CAAC,CACH;EACH;EAEAE,QAAQ,CAACP,KAAU;IACjB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAO,IAAI,CAACC,OAAO,GAAG,kBAAkB,EAAEF,KAAK,CAAC,CAACG,IAAI,CACxEZ,GAAG,CAAEc,IAAI,IAAI;MACX,IAAIA,IAAI,EAAE;QACR,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC;;IAE7B,CAAC,CAAC,CACH;EACH;EAEAG,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACb,iBAAiB,CAACc,IAAI,CAAC,IAAI,CAAC;EACnC;EAEAL,cAAc,CAACD,IAAU;IACvBA,IAAI,CAACO,KAAK,GAAG,EAAE;IACf,MAAMA,KAAK,GAAG,IAAI,CAACC,eAAe,CAACR,IAAI,CAACS,KAAK,CAAC,CAACC,IAAI;IACnDC,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,GAAIP,IAAI,CAACO,KAAK,GAAGA,KAAK,GAAIP,IAAI,CAACO,KAAK,CAACM,IAAI,CAACN,KAAK,CAAC;IACpEH,YAAY,CAACU,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC,CAAC;IAClD,IAAI,CAACR,iBAAiB,CAACc,IAAI,CAACN,IAAI,CAAC;EACnC;EAEAQ,eAAe,CAACC,KAAa;IAC3B,OAAOM,IAAI,CAACE,KAAK,CAACC,IAAI,CAACT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C;;AArDW/B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAgC,SAAdhC,cAAc;EAAAiC,YAFb;AAAM","names":["BehaviorSubject","map","environment","AccountService","constructor","http","apiUrl","currentUserSource","asObservable","login","model","post","baseUrl","pipe","response","user","setCurrentUser","register","logout","localStorage","removeItem","next","roles","getDecodedToken","token","role","Array","isArray","push","setItem","JSON","stringify","parse","atob","split","factory","providedIn"],"sourceRoot":"","sources":["D:\\Harry\\NetCore\\DACCodingAssignment\\DACCodingAssignment\\clientfront\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'; \nimport { BehaviorSubject, map } from 'rxjs';\nimport { User } from '../_models/user';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n  baseUrl = environment.apiUrl;\n  private currentUserSource = new BehaviorSubject<User | null>(null);\n  currentUser$ = this.currentUserSource.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  login(model: any) {\n    return this.http.post<User>(this.baseUrl + 'account/login', model).pipe(\n      map((response: User) => {\n        const user = response;\n        if (user) {\n          this.setCurrentUser(user);\n        }\n      })\n    );\n  }\n\n  register(model: any) {\n    return this.http.post<User>(this.baseUrl + 'account/register', model).pipe(\n      map((user) => {\n        if (user) {\n          this.setCurrentUser(user);\n        }\n      })\n    );\n  }\n\n  register(model: any) {\n    return this.http.post<User>(this.baseUrl + 'account/register', model).pipe(\n      map((user) => {\n        if (user) {\n          this.setCurrentUser(user);\n        }\n      })\n    );\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n    this.currentUserSource.next(null);\n  }\n\n  setCurrentUser(user: User) {\n    user.roles = [];\n    const roles = this.getDecodedToken(user.token).role;\n    Array.isArray(roles) ? (user.roles = roles) : user.roles.push(roles);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.currentUserSource.next(user);\n  }\n\n  getDecodedToken(token: string) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}